version: '3.8'
services:
  zookeeper:
    image: 'docker.io/bitnami/zookeeper:3-debian-10'
    ports:
      - '127.0.0.1:2181:2181'
    volumes:
      - $DATA/zookeeper_data:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - opex
    deploy:
      restart_policy:
        condition: on-failure
  kafka:
    image: 'docker.io/bitnami/kafka:2-debian-10'
    ports:
      - '127.0.0.1:9092:9092'
    volumes:
      - $DATA/kafka-data:/bitnami
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper
    networks:
      - opex
    deploy:
      restart_policy:
        condition: on-failure
  consul:
    image: 'consul'
    ports:
      - '127.0.0.1:8500:8500'
      - '127.0.0.1:8300:8300'
      - '127.0.0.1:8600:8600'
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    networks:
      - opex
    deploy:
      restart_policy:
        condition: on-failure
  redis:
    image: "redis:alpine"
    command: redis-server
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - $DATA/redis-data:/var/lib/redis
      - $DATA/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_REPLICATION_MODE=master
    networks:
      - opex
    deploy:
      restart_policy:
        condition: on-failure
  postgres-accountant:
    image: "postgres"
    ports:
      - 127.0.0.1:5433:5432
    environment:
      - POSTGRES_USER=opex
      - POSTGRES_PASSWORD=hiopex
      - POSTGRES_DB=opex_accountant
    volumes:
      - $DATA/accountant-data:/var/lib/postgresql/data/
    networks:
      - opex
  postgres-eventlog:
    image: "postgres"
    ports:
      - 127.0.0.1:5434:5432
    environment:
      - POSTGRES_USER=opex
      - POSTGRES_PASSWORD=hiopex
      - POSTGRES_DB=opex_eventlog
    volumes:
      - $DATA/runtime/eventlog-data:/var/lib/postgresql/data/
    networks:
      - opex
  postgres-auth:
    image: "postgres"
    ports:
      - 127.0.0.1:5435:5432
    environment:
      - POSTGRES_USER=opex
      - POSTGRES_PASSWORD=hiopex
      - POSTGRES_DB=opex_auth
    volumes:
      - $DATA/auth-data:/var/lib/postgresql/data/
    networks:
      - opex
    deploy:
      restart_policy:
        condition: on-failure
  postgres-wallet:
    image: "postgres"
    ports:
      - 127.0.0.1:5436:5432
    environment:
      - POSTGRES_USER=opex
      - POSTGRES_PASSWORD=hiopex
      - POSTGRES_DB=opex_wallet
    volumes:
      - $DATA/wallet-data:/var/lib/postgresql/data/
    networks:
      - opex
    deploy:
      restart_policy:
        condition: on-failure
  postgres-api:
    image: "postgres"
    ports:
      - 127.0.0.1:5437:5432
    environment:
      - POSTGRES_USER=opex
      - POSTGRES_PASSWORD=hiopex
      - POSTGRES_DB=opex_api
    volumes:
      - $DATA/api-data:/var/lib/postgresql/data/
    networks:
      - opex
    deploy:
      restart_policy:
        condition: on-failure
  postgres-bc-gateway:
    image: "postgres"
    ports:
      - 127.0.0.1:5438:5432
    environment:
      - POSTGRES_USER=opex
      - POSTGRES_PASSWORD=hiopex
      - POSTGRES_DB=opex_bc_gateway
    volumes:
      - $DATA/bc-gateway-data:/var/lib/postgresql/data/
    networks:
      - opex
    deploy:
      restart_policy:
        condition: on-failure
  accountant:
    container_name: accountant
    build:
      context: ../accountant/accountant-app
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:8089:8089
      - 127.0.0.1:1045:1044
    environment:
      - JAVA_OPTS=-Xmx256m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044
      - SPRING_PROFILES_ACTIVE=docker,demo,scheduled
      - KAFKA_IP_PORT=kafka:9092
      - REDIS_HOST=redis
      - CONSUL_HOST=consul
      - DB_IP_PORT=postgres-accountant
    networks:
      - opex
    depends_on:
      - zookeeper
      - kafka
      - redis
      - consul
      - postgres-accountant
  eventlog:
    container_name: eventlog
    build:
      context: ../eventlog/eventlog-app
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:8090:8090
    environment:
      - JAVA_OPTS=-Xmx256m
      - SPRING_PROFILES_ACTIVE=docker,demo
      - KAFKA_IP_PORT=kafka:9092
      - REDIS_HOST=redis
      - CONSUL_HOST=consul
      - DB_IP_PORT=postgres-eventlog
    networks:
      - opex
    depends_on:
      - zookeeper
      - kafka
      - redis
      - consul
      - postgres-eventlog
  matching-engine:
    container_name: matching-engine
    build:
      context: ../matching-engine/matching-engine-app
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:8092:8092
      - 127.0.0.1:1046:1044
    environment:
      - JAVA_OPTS=-Xmx256m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044
      - SPRING_PROFILES_ACTIVE=docker,demo
      - KAFKA_IP_PORT=kafka:9092
      - REDIS_HOST=redis
    networks:
      - opex
    depends_on:
      - zookeeper
      - kafka
      - redis
  matching-gateway:
    container_name: matching-gateway
    build:
      context: ../matching-gateway/matching-gateway-app
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:8093:8093
      - 127.0.0.1:1047:1044
    environment:
      - JAVA_OPTS=-Xmx256m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044
      - SPRING_PROFILES_DEFAULT=docker,demo
      - KAFKA_IP_PORT=kafka:9092
      - REDIS_HOST=redis
      - CONSUL_HOST=consul
    networks:
      - opex
    depends_on:
      - zookeeper
      - kafka
      - consul
  auth:
    container_name: auth
    build:
      context: ../user-management/keycloak-gateway
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:8083:8083
      - 127.0.0.1:1048:1044
    environment:
      - JAVA_OPTS=-Xmx256m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044
      - SPRING_PROFILES_ACTIVE=docker,demo
      - KAFKA_IP_PORT=kafka:9092
      - REDIS_HOST=redis
      - CONSUL_HOST=consul
      - DB_IP_PORT=postgres-auth
      - PROXY_ADDRESS_FORWARDING=true
      - WORKING_DIR=$DATA
    networks:
      - opex
    depends_on:
      - zookeeper
      - kafka
      - redis
      - consul
      - postgres-auth
    deploy:
      restart_policy:
        condition: on-failure
  wallet:
    container_name: wallet
    build:
      context: ../wallet/wallet-app
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:8091:8091
      - 127.0.0.1:1049:1044
    environment:
      - JAVA_OPTS=-Xmx256m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044
      - SPRING_PROFILES_DEFAULT=docker,demo
      - KAFKA_IP_PORT=kafka:9092
      - REDIS_HOST=redis
      - CONSUL_HOST=consul
      - DB_IP_PORT=postgres-wallet
    networks:
      - opex
    depends_on:
      - zookeeper
      - kafka
      - redis
      - consul
      - postgres-wallet
    deploy:
      restart_policy:
        condition: on-failure
  api:
    container_name: API
    build:
      context: ../api/api-app
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:8094:8094
      - 127.0.0.1:1050:1044
    environment:
      - JAVA_OPTS=-Xmx256m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044
      - SPRING_PROFILES_DEFAULT=docker,demo
      - KAFKA_IP_PORT=kafka:9092
      - REDIS_HOST=redis
      - CONSUL_HOST=consul
      - DB_IP_PORT=postgres-api
    networks:
      - opex
    depends_on:
      - zookeeper
      - kafka
      - redis
      - consul
      - postgres-api
    deploy:
      restart_policy:
        condition: on-failure
  websocket:
    container_name: websocket
    build:
      context: ../websocket/websocket-app
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:8097:8097
      - 127.0.0.1:1054:1044
    environment:
      - JAVA_OPTS=-Xmx256m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044
      - SPRING_PROFILES_DEFAULT=docker
      - KAFKA_IP_PORT=kafka:9092
      - CONSUL_HOST=consul
      - DB_IP_PORT=postgres-api
    networks:
      - opex
    depends_on:
      - zookeeper
      - kafka
      - consul
      - postgres-api
    deploy:
      restart_policy:
        condition: on-failure
  bc-gateway:
    container_name: bc-gateway
    build:
      context: ../bc-gateway/bc-gateway-app
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:8095:8095
      - 127.0.0.1:1052:1044
    environment:
      - JAVA_OPTS=-Xmx256m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044
      - SPRING_PROFILES_DEFAULT=docker,demo,scheduled
      - KAFKA_IP_PORT=kafka:9092
      - REDIS_HOST=redis
      - CONSUL_HOST=consul
      - DB_IP_PORT=postgres-bc-gateway
    networks:
      - opex
    depends_on:
      - zookeeper
      - kafka
      - redis
      - consul
      - postgres-bc-gateway
    deploy:
      restart_policy:
        condition: on-failure
  storage:
    container_name: storage
    build:
      context: ../storage/storage-app
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:8096:8096
      - 127.0.0.1:1053:1044
    environment:
      - JAVA_OPTS=-Xmx256m -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=1044
      - SPRING_PROFILES_DEFAULT=docker
      - CONSUL_HOST=consul
    networks:
      - opex
    depends_on:
      - consul
    deploy:
      restart_policy:
        condition: on-failure
  nginx:
    image: jboesl/docker-nginx-headers-more
    container_name: opex_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - $DATA/www:/data/www
    ports:
      - 80:80
    depends_on:
      - wallet
      - auth
      - matching-gateway
      - api
    networks:
      - opex
networks:
  opex:
    driver: bridge
